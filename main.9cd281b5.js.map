{"version":3,"sources":["scripts/main.js"],"names":["start","document","querySelector","table","messageStart","messageLose","messageWin","scoreGame","tableSize","score","field","randomNum","num","Math","random","randomIndex","floor","found","i","k","renderHtml","buttonClick","classList","replace","add","innerText","fieldChange","fieldGame","fieldCopy","currentCell","rows","cells","value","className","remove","gameOver","moveCell","row","newRow","filter","val","isFinite","length","push","moveCellsLeft","moveCellsRigth","reverse","moveCellsUp","moveCellsDown","addEventListener","e","contains","preventDefault","map","arr","slice","code"],"mappings":"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","file":"main.9cd281b5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst start = document.querySelector('.start');\nconst table = document.querySelector('tbody');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst scoreGame = document.querySelector('.game-score');\nconst tableSize = 4;\nlet score = 0;\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstart.addEventListener('click', buttonClick);\n\nfunction randomNum() {\n  const num = Math.random() < 0.1 ? 4 : 2;\n  const randomIndex = () => Math.floor(Math.random() * tableSize);\n  let found = false;\n\n  while (!found) {\n    const i = randomIndex();\n    const k = randomIndex();\n\n    if (field[i][k] === 0) {\n      field[i][k] = num;\n      found = true;\n    }\n  }\n\n  renderHtml();\n};\n\nfunction buttonClick() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n\n  start.classList.replace('start', 'restart');\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  start.innerText = 'Restart';\n\n  randomNum();\n  randomNum();\n};\n\ndocument.addEventListener('keydown', e => {\n  if (!start.classList.contains('restart')) {\n    return;\n  };\n\n  e.preventDefault();\n\n  const fieldCopy = field.map(arr => arr.slice());\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      moveCellsLeft();\n      break;\n    case 'ArrowRight':\n      moveCellsRigth();\n      break;\n    case 'ArrowUp':\n      moveCellsUp();\n      break;\n    case 'ArrowDown':\n      moveCellsDown();\n      break;\n    default:\n      break;\n  }\n\n  if (fieldChange(field, fieldCopy)) {\n    randomNum();\n  }\n\n  renderHtml();\n});\n\nfunction fieldChange(fieldGame, fieldCopy) {\n  for (let i = 0; i < tableSize; i++) {\n    for (let k = 0; k < tableSize; k++) {\n      if (fieldGame[i][k] !== fieldCopy[i][k]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction renderHtml() {\n  for (let i = 0; i < tableSize; i++) {\n    for (let k = 0; k < tableSize; k++) {\n      const currentCell = table.rows[i].cells[k];\n      const value = field[i][k];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.className = `field-cell`;\n\n      if (value > 0) {\n        currentCell.innerText = value;\n        currentCell.classList.add(`field-cell--${value}`);\n      }\n\n      if (value === 2048) {\n        messageWin.classList.remove('hidden');\n        start.classList.replace('restart', 'start');\n        start.innerText = 'Start';\n      }\n    }\n  }\n\n  scoreGame.innerText = score;\n\n  if (gameOver()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction gameOver() {\n  for (let i = 0; i < tableSize; i++) {\n    for (let k = 0; k < tableSize; k++) {\n      if (field[i][k] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < tableSize; i++) {\n    for (let k = 0; k < tableSize - 1; k++) {\n      if (field[i][k] === field[i][k + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < tableSize - 1; i++) {\n    for (let k = 0; k < tableSize; k++) {\n      if (field[i][k] === field[i + 1][k]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction moveCell(row) {\n  let newRow = row.filter(val => val !== 0);\n\n  for (let k = 0; k < tableSize - 1; k++) {\n    if (newRow[k] === newRow[k + 1] && isFinite(newRow[k])) {\n      newRow[k] *= 2;\n      newRow[k + 1] = 0;\n      score += newRow[k];\n    };\n  }\n\n  newRow = newRow.filter(val => val !== 0);\n\n  while (newRow.length < tableSize) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nfunction moveCellsLeft() {\n  for (let i = 0; i < tableSize; i++) {\n    let row = field[i];\n\n    row = moveCell(row);\n    field[i] = row;\n  }\n};\n\nfunction moveCellsRigth() {\n  for (let i = 0; i < tableSize; i++) {\n    let row = field[i];\n\n    row = moveCell(row.reverse());\n    field[i] = row.reverse();\n  }\n};\n\nfunction moveCellsUp() {\n  for (let i = 0; i < tableSize; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row = moveCell(row);\n\n    for (let k = 0; k < tableSize; k++) {\n      field[k][i] = row[k];\n    }\n  }\n}\n\nfunction moveCellsDown() {\n  for (let i = 0; i < tableSize; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row = moveCell(row.reverse());\n    row.reverse();\n\n    for (let k = 0; k < tableSize; k++) {\n      field[k][i] = row[k];\n    }\n  }\n}\n"]}